getwd()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
> head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
nrows(outcome)
nrow(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
> ## You may get a warning about NAs being introduced; that is okay
> hist(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])
outcome[, 11] <- as.numeric(outcome[, 11])hist(outcome[, 11])
hist(outcome[, 11])
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", na.string = "Not Available",  stringsAsFactors = FALSE)
subdata <- subset(data, select=c(State, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
names(subdata) <- c("State", "Hospital.Name", "Heart.Attack",
"Heart.Failure","Pneumonia")
## Check that state and outcome are valid
state_data <- subset(subdata, State==state)
if ( nrow(state_data)==0 ) {
stop("invalid state")
}
if ( (outcome!="heart attack") & (outcome!="heart failure")
& (outcome!="pneumonia") )   {
stop("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
if ( outcome=="heart attack")  {
hos_rank <- state_data[ order(state_data$Heart.Attack, state_data$Hospital.Name), ]
}
else if ( outcome=="heart failure")  {
hos_rank <- state_data[ order(state_data$Heart.Failure, state_data$Hospital.Name), ]
}
else  {
hos_rank <- state_data[ order(state_data$Pneumonia, state_data$Hospital.Name), ]
}
best_hos <- hos_rank[[1,2]]
return(best_hos)
}
source("best.R")best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", na.string = "Not Available",  stringsAsFactors = FALSE)
subdata <- subset(data, select=c(State, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
names(subdata) <- c("State", "Hospital.Name", "Heart.Attack",
"Heart.Failure","Pneumonia")
## Check that state and outcome are valid
state_data <- subset(subdata, State==state)
if ( nrow(state_data)==0 ) {
stop("invalid state")
}
if ( (outcome!="heart attack") & (outcome!="heart failure")
& (outcome!="pneumonia") )   {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
if ( outcome=="heart attack")  {
hos_rank <- state_data[ order(state_data$Heart.Attack, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Attack) )
}
else if ( outcome=="heart failure")  {
hos_rank <- state_data[ order(state_data$Heart.Failure, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Failure) )
}
else  {
hos_rank <- state_data[ order(state_data$Pneumonia, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Pneumonia) )
}
n <- nrow(hos_rank_naomit)
hos_rank_naomit$Rank <- 1:n
if (num == "best")  {
return(hos_rank_naomit[[1,2]])
}
else if (num == "worst")  {
return( hos_rank_naomit[[n,2]] )
}
else if ( (num>=1)&(num<=n) )  {
return( hos_rank_naomit[[num,2]] )
}
else  {
return(NA)
}
}
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankall <- function(outcome, num = "best") {
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", na.string = "Not Available",  stringsAsFactors = FALSE)
subdata <- subset(data, select=c(State, Hospital.Name,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
names(subdata) <- c("State", "Hospital.Name", "Heart.Attack",
"Heart.Failure","Pneumonia")
## Check that state and outcome are valid
state_data <- subset(subdata, State==state)
if ( nrow(state_data)==0 ) {
stop("invalid state")
}
if ( (outcome!="heart attack") & (outcome!="heart failure")
& (outcome!="pneumonia") )   {
stop("invalid outcome")
}
## Return hospital name in that state with the given rank 30-day death rate
if ( outcome=="heart attack")  {
hos_rank <- state_data[ order(state_data$Heart.Attack, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Attack) )
}
else if ( outcome=="heart failure")  {
hos_rank <- state_data[ order(state_data$Heart.Failure, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Heart.Failure) )
}
else  {
hos_rank <- state_data[ order(state_data$Pneumonia, state_data$Hospital.Name), ]
hos_rank_naomit <- subset(hos_rank, !is.na(hos_rank$Pneumonia) )
}
n <- nrow(hos_rank_naomit)
hos_rank_naomit$Rank <- 1:n
if (num == "best")  {
return(hos_rank_naomit[[1,2]])
}
else if (num == "worst")  {
return( hos_rank_naomit[[n,2]] )
}
else if ( (num>=1)&(num<=n) )  {
return( hos_rank_naomit[[num,2]] )
}
else  {
return(NA)
}
}
allstates <- c("AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","GU","HI",
"IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO",
"MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR",
"PA","PR","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI",
"WV","WY")
hospitals <- vector()
for (i in 1:54)  {
hospitals[i] <- rankhospital(allstates[i], outcome=outcome, num=num)
}
results <- data.frame(hospitals,allstates)
names(results) <- c("hospital","state")
rownames(results) <- allstates
return(results)
}
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
clear()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2)
mmy_matrix$get()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix <- CacheMatrix(matrix(1:4, 2, 2))
my_matrix <- CacheMatrix(matrix(1:4, 2, 2))
my_matrix <- CacheMatrix(matrix(1:4, 2, 2))
my_matrix <- CacheMatrix(matrix(1:4, 2, 2))
## Programming Assignment 2 - R Programming
## Data Science Specialization Track
##
## These two functions are part of completing the second
## programming assignment for the R Programming course
## offered on Coursera through the Johns Hopkins
## School for Public Health
##
## The two functions shown here help in caching the
## inverse of a matrix.  Matrix inversion is usually
## very computationally intensive - especially for large
## size matrices.  Sometimes in code (and especially in loops),
## the inverse of a matrix need only be computed once.
## To avoid recomputing the inverse and generating the
## same result repeatedly, we can simply compute the
## result once.  If you try to recompute the inverse again,
## we have already computed this already and so we should
## just return this pre-computed result.
##
## makeCacheMatrix:
## To facilitate this caching, you first create a special
## matrix that will help us with this by using the
## makeCacheMatrix function.  The input into this function
## is simply a variable of type matrix.
##
## Usage example:
## x <- matrix(1:4, nrow=2, ncol=2)
## m <- makeCacheMatrix(x)
CacheMatrix <- function(x = matrix()) {
# Following the same format as the assignment example
# Creating a makeCacheMatrix object will consist of
# four functions encapsulated in a list
# 1. set the matrix
# 2. get the matrix
# 3. set the inverse of the matrix
# 4. get the inverse of the matrix
# Initially set to NULL
# Changes when the user sets the value
inv <- NULL
# set function
# Sets the matrix itself but not the inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
# get function
# Gets the matrix itself but not the inverse
get <- function() x
# Manually set the inverse
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve:
## Once you create this matrix, you use the cacheSolve
## function to compute the inverse and cache the result
##
## If you try using cacheSolve again on the same special
## matrix, then the pre-computed result is obtained, thus
## avoiding any recomputation.  An informative message
## will be shown in the command prompt when the pre-computed
## result is returned instead.
##
## Usage example:
## x <- matrix(1:4, nrow=2, ncol=2)
## m <- makeCacheMatrix(x)
## s <- cacheSolve(m)
## print(s)
## s should return:
##     [,1] [,2]
##[1,]   -2  1.5
##[2,]    1 -0.5
##
## s2 <- cacheSolve(m)
## This should display a "Getting cached matrix" message
## print(s2)
## s2 should return
##     [,1] [,2]
##[1,]   -2  1.5
##[2,]    1 -0.5
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# Following the same format as the assignment example
# Get the current state of the inverse and see if it
# has been computed yet
inv <- x$getinverse()
# If it has...
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
my_matrix <- CacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
